// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PocketCalculator.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ParsingNumbers")]
    public partial class ParsingNumbersFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ParsingNumbers.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ParsingNumbers", "In order to parse numbers\r\nI want to parse numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Parse a single number")]
        [NUnit.Framework.TestCaseAttribute("0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("3", "3", null)]
        [NUnit.Framework.TestCaseAttribute("4", "4", null)]
        [NUnit.Framework.TestCaseAttribute("5", "5", null)]
        [NUnit.Framework.TestCaseAttribute("6", "6", null)]
        [NUnit.Framework.TestCaseAttribute("7", "7", null)]
        [NUnit.Framework.TestCaseAttribute("8", "8", null)]
        [NUnit.Framework.TestCaseAttribute("9", "9", null)]
        [NUnit.Framework.TestCaseAttribute("10", "10", null)]
        [NUnit.Framework.TestCaseAttribute("123.45", "123.45", null)]
        public virtual void ParseASingleNumber(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Parse a single number", exampleTags);
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding numbers")]
        [NUnit.Framework.TestCaseAttribute("0+0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0+1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1+0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1+1", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1+2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("2+1", "3", null)]
        [NUnit.Framework.TestCaseAttribute("2+2", "4", null)]
        [NUnit.Framework.TestCaseAttribute("0.5+0.7", "1.2", null)]
        [NUnit.Framework.TestCaseAttribute("3.1+7.11", "10.21", null)]
        [NUnit.Framework.TestCaseAttribute("3.1+7.11+45", "55.21", null)]
        public virtual void AddingNumbers(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding numbers", exampleTags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 26
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Subtracting numbers")]
        [NUnit.Framework.TestCaseAttribute("0-0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0-1", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("1-0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1-1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("7.5-3.1", "4.4", null)]
        [NUnit.Framework.TestCaseAttribute("11-3-1", "7", null)]
        [NUnit.Framework.TestCaseAttribute("1-7-13", "-19", null)]
        public virtual void SubtractingNumbers(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Subtracting numbers", exampleTags);
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 44
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding and subtracting numbers")]
        [NUnit.Framework.TestCaseAttribute("0+0-0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1+2-3", "0", null)]
        [NUnit.Framework.TestCaseAttribute("7-3+11", "15", null)]
        [NUnit.Framework.TestCaseAttribute("11-3+7", "15", null)]
        [NUnit.Framework.TestCaseAttribute("1+3+5-7", "2", null)]
        public virtual void AddingAndSubtractingNumbers(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding and subtracting numbers", exampleTags);
#line 55
this.ScenarioSetup(scenarioInfo);
#line 56
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying numbers")]
        [NUnit.Framework.TestCaseAttribute("0*0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0*1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1*0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1*1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2*3", "6", null)]
        [NUnit.Framework.TestCaseAttribute("7*13", "91", null)]
        public virtual void MultiplyingNumbers(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying numbers", exampleTags);
#line 67
this.ScenarioSetup(scenarioInfo);
#line 68
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Multiplying and Adding numbers")]
        [NUnit.Framework.TestCaseAttribute("0*0+0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("2+1*0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1*0+3", "3", null)]
        [NUnit.Framework.TestCaseAttribute("1*1+4", "5", null)]
        [NUnit.Framework.TestCaseAttribute("2+3*7", "23", null)]
        [NUnit.Framework.TestCaseAttribute("7*13+5", "96", null)]
        public virtual void MultiplyingAndAddingNumbers(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Multiplying and Adding numbers", exampleTags);
#line 80
this.ScenarioSetup(scenarioInfo);
#line 81
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 82
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 83
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dividing numbers")]
        [NUnit.Framework.TestCaseAttribute("0/1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1/1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("7/5", "1.4", null)]
        [NUnit.Framework.TestCaseAttribute("1234/2", "617", null)]
        public virtual void DividingNumbers(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dividing numbers", exampleTags);
#line 94
this.ScenarioSetup(scenarioInfo);
#line 95
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Negative numbers")]
        [NUnit.Framework.TestCaseAttribute("0+-1", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("0--1", "1", null)]
        [NUnit.Framework.TestCaseAttribute("5*-1", "-5", null)]
        [NUnit.Framework.TestCaseAttribute("5/-2", "-2.5", null)]
        public virtual void NegativeNumbers(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Negative numbers", exampleTags);
#line 105
this.ScenarioSetup(scenarioInfo);
#line 106
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 107
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 108
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Working with paranthesis")]
        [NUnit.Framework.TestCaseAttribute("3*(5+7)", "36", null)]
        [NUnit.Framework.TestCaseAttribute("11*(5-7)", "-22", null)]
        [NUnit.Framework.TestCaseAttribute("1+(-2)", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("1+(7*(3+5)-1)", "56", null)]
        public virtual void WorkingWithParanthesis(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Working with paranthesis", exampleTags);
#line 116
this.ScenarioSetup(scenarioInfo);
#line 117
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 118
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 119
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Working with percent")]
        [NUnit.Framework.TestCaseAttribute("5+10%", "5.1", null)]
        [NUnit.Framework.TestCaseAttribute("120*20%", "24", null)]
        public virtual void WorkingWithPercent(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Working with percent", exampleTags);
#line 127
this.ScenarioSetup(scenarioInfo);
#line 128
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 129
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 130
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Working with exponents")]
        [NUnit.Framework.TestCaseAttribute("5^2", "25", null)]
        [NUnit.Framework.TestCaseAttribute("3^3", "27", null)]
        [NUnit.Framework.TestCaseAttribute("9^0.5", "3", null)]
        [NUnit.Framework.TestCaseAttribute("0.5^-1", "2", null)]
        [NUnit.Framework.TestCaseAttribute("9^0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("0.25^-2", "16", null)]
        public virtual void WorkingWithExponents(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Working with exponents", exampleTags);
#line 136
this.ScenarioSetup(scenarioInfo);
#line 137
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 138
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Working with Pi")]
        [NUnit.Framework.TestCaseAttribute("\\pi/\\pi", "1", null)]
        [NUnit.Framework.TestCaseAttribute("(2*π)/(2*π)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("(2*\\pi)/(\\pi*2)", "1", null)]
        public virtual void WorkingWithPi(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Working with Pi", exampleTags);
#line 149
this.ScenarioSetup(scenarioInfo);
#line 150
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 151
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 152
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Working with trigonometric operators")]
        [NUnit.Framework.TestCaseAttribute("sin 0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("sin(\\pi)", "0", null)]
        [NUnit.Framework.TestCaseAttribute("sin (\\pi/2)", "1", null)]
        [NUnit.Framework.TestCaseAttribute("sin (3*\\pi/2)", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("cos 0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("cos (\\pi)", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("cos (\\pi/2)", "0", null)]
        [NUnit.Framework.TestCaseAttribute("cos (3*\\pi/2)", "0", null)]
        [NUnit.Framework.TestCaseAttribute("tan 0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("tan \\pi", "0", null)]
        public virtual void WorkingWithTrigonometricOperators(string input, string result, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Working with trigonometric operators", exampleTags);
#line 159
this.ScenarioSetup(scenarioInfo);
#line 160
 testRunner.Given(string.Format("I have entered {0} into the calculator", input), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 161
 testRunner.When("I parse the input", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 162
 testRunner.Then(string.Format("the result should be the number {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
